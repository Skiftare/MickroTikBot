package edu.Data.formatters;

import edu.Data.dto.ClientTransfer;
import edu.Data.dto.UserInfo;

import java.util.Date;
import java.util.logging.Logger;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
public final class UserProfileFormatter {
    private final static String LOGIN_STRING = "Login for l2tp:";
    private final static String PASSWORD_STRING = "Password for l2tp:";
    private final static String SECRET_STRING = "Secret:";
    private final static String ENDL_STRING = "\n";

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
     *
     * @param userInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     * @return –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public String format(final UserInfo userInfo) {
        if (userInfo == null || userInfo.client() == null) {
            return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        }
        return formatClientInfo(userInfo);
    }

    private String formatClientInfo(final UserInfo userInfo) {
        ClientTransfer client = userInfo.client();

        StringBuilder result = new StringBuilder();
        result.append("üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:");
        result.append(ENDL_STRING);
        result.append(ENDL_STRING);
        result.append("üÜî ID: ").append(client.tgUserId()).append(ENDL_STRING);
        result.append("üòé –í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –°–∏—Å—Ç–µ–º–µ: ").append(userInfo.status().toString())
                .append(ENDL_STRING);

        if (client.name() != null) {
            result.append("üë§ –ò–º—è: ").append(client.name()).append(ENDL_STRING);
        }

        if (client.phone() != null) {
            result.append("üì± –¢–µ–ª–µ—Ñ–æ–Ω: ").append(client.phone()).append(ENDL_STRING);
        }
        if (client.balance() != null) {
            result.append("üí∞ –ë–∞–ª–∞–Ω—Å: ").append(client.balance()).append(ENDL_STRING);
        }

        if (client.vpnProfile() != null) {
            try {
                result.append(ENDL_STRING);
                result.append("üîê VPN –ø—Ä–æ—Ñ–∏–ª—å: ").append((EncryptionUtil.decrypt(client.vpnProfile())));
            } catch (Exception e) {
                Logger.getAnonymousLogger().info("Exception: " + e.getMessage());
            }
            result.append(ENDL_STRING);
            result.append("–°—Ç–∞—Ç—É—Å: ").append(client.isVpnProfileAlive() ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω");

            if (client.expiredAt() != null && client.expiredAt().getTime() != 0
                    && !(client.expiredAt().equals(new Date(0)))) {
                result.append(ENDL_STRING);
                result.append("‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ").append(client.expiredAt());
            }
            result.append("\n");
            result.append("https://t.me/MikroTikBotTGC/7");
        }
        return result.toString();
    }

    public static String formatCredentialsForConnection(String incomedString) {
        String[] lines = incomedString.split(ENDL_STRING);

        StringBuilder result = new StringBuilder();
        String bufferedLine;
        for (String line : lines) {
            bufferedLine = line;
            if (line.startsWith(LOGIN_STRING)) {
                bufferedLine = formatLine(line, LOGIN_STRING);
            } else if (line.startsWith(PASSWORD_STRING)) {
                bufferedLine = formatLine(line, PASSWORD_STRING);
            } else if (line.startsWith(SECRET_STRING)) {
                bufferedLine = formatLine(line, SECRET_STRING);
            }
            result.append(bufferedLine).append(ENDL_STRING);
        }

        return result.toString().trim();
    }

    private static String formatLine(String line, String prefix) {
        String value = line.substring(prefix.length()).trim();
        String plainTextMarkdownFormatter = "`";
        return prefix + " " + plainTextMarkdownFormatter + value + plainTextMarkdownFormatter;
    }

}
