services:
  bot:
    build:
      context: .
      dockerfile: BotService/Bot.Dockerfile
    container_name: MickroTikBot
    depends_on:
      - postgresql
      - router_connector
    networks:
      - botnet
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - NEW_ROUTER_LOGIN=${NEW_ROUTER_LOGIN}
      - NEW_ROUTER_PASS=${NEW_ROUTER_PASS}
      - STELLAR_PUBLIC_KEY=${STELLAR_PUBLIC_KEY}
      - STELLAR_SECRET_KEY=${STELLAR_SECRET_KEY}
      - SERVER_IP=${SERVER_IP}
      - STELLAR_NETWORK=${STELLAR_NETWORK}
      - IPSEC_SECRET_KEY=${IPSEC_SECRET_KEY}
      - L2TP_RANGES=${L2TP_RANGES}
      - L2TP_PROF_NAME=${L2TP_PROF_NAME}
      - CHR_ROUTER_IP=${CHR_ROUTER_IP}
      - NEW_DATABASE_LOGIN=${NEW_DATABASE_LOGIN}
      - NEW_DATABASE_PASS=${NEW_DATABASE_PASS}
      - KEY_FOR_AES=${KEY_FOR_AES}
      - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}
      - DB_ENCRYPTION_KEY=${DB_ENCRYPTION_KEY}
      - ROUTER_BEHAVIOUR=${ROUTER_BEHAVIOUR}
    env_file:
      - .env
    ports:
      - "8080:8080"
    restart: always

  router_connector:
    build:
        context: .
        dockerfile: RouterConnectorService/Router.Dockerfile
    container_name: RouterConnector
    depends_on:
        - postgresql
    networks:
        - botnet
    environment:
        - NEW_ROUTER_LOGIN=${NEW_ROUTER_LOGIN}
        - NEW_ROUTER_PASS=${NEW_ROUTER_PASS}
        - NEW_DATABASE_LOGIN=${NEW_DATABASE_LOGIN}
        - NEW_DATABASE_PASS=${NEW_DATABASE_PASS}
        - SERVER_IP=${SERVER_IP}
        - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
        - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}
        - DB_ENCRYPTION_KEY=${DB_ENCRYPTION_KEY}
        - ROUTER_BEHAVIOUR=${ROUTER_BEHAVIOUR}
    env_file:
        - .env
    restart: always
    ports:
      - "8090:8090"



  postgresql:
    image: postgres:16
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: table
      POSTGRES_USER: ${NEW_DATABASE_LOGIN}
      POSTGRES_PASSWORD: ${NEW_DATABASE_PASS}
    env_file:
      - .env

    networks:
      - botnet

    restart: always
  liquibase-migrations:
    image: liquibase/liquibase:4.25
    depends_on:
      - postgresql
    environment:
      NEW_DATABASE_LOGIN: ${NEW_DATABASE_LOGIN}
      NEW_DATABASE_PASS: ${NEW_DATABASE_PASS}
    env_file:
      - .env
    command:
      [
        "--changelog-file=master.xml",
        "--driver=org.postgresql.Driver",
        "--url=jdbc:postgresql://postgresql:5432/table",
        "--username=${NEW_DATABASE_LOGIN}",
        "--password=${NEW_DATABASE_PASS}",
        "update"
      ]
    volumes:
      - ./migrations:/liquibase/changelog
    networks:
      - botnet
    restart:
      on-failure



networks:
  botnet:
    driver: bridge
volumes:
  postgresql: { }